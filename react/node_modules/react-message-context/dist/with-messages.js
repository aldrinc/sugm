'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMessage = require('./get-message');

var _getMessage2 = _interopRequireDefault(_getMessage);

var _messageContext = require('./message-context');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a HOC providing the wrapped component with a `messages` prop
 *
 * @param {string|string[]} [id]
 * @param {string|string[]} [locales]
 *
 * @example
 * const MessageList = ({ messages }) => (
 *   <ul>
 *     {Object.entries(messages).map(([key, msg]) => (
 *       <li key={key}>`${key}: ${msg()}`</li>
 *     )}
 *   </ul>
 * )
 *
 * const WrappedList = withMessages(['path', 'to', 'object'])(MessageList)
 *
 * <WrappedList />
 */
var withMessages = function withMessages(id, locales) {
  return function (Component) {
    var render = function render(props, ref) {
      return _react2.default.createElement(
        _messageContext.Consumer,
        null,
        function (_ref) {
          var lc0 = _ref.locales,
              messages = _ref.messages,
              pathSep = _ref.pathSep;

          var lc = Array.isArray(locales) ? locales : locales ? [locales] : lc0;
          var msg = (0, _getMessage2.default)(messages, lc, id, pathSep);
          return _react2.default.createElement(Component, _extends({}, props, { messages: msg, ref: ref }));
        }
      );
    };
    var args = '[' + id + ']';
    if (locales) args += ', [' + locales + ']';
    var name = Component.displayName || Component.name;
    render.displayName = 'withMessages(' + args + ')(' + name + ')';
    return _react2.default.forwardRef(render);
  };
};

exports.default = withMessages;